// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePerson = `-- name: DeletePerson :execrows
DELETE from person
WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deletePerson, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getPeople = `-- name: GetPeople :many
SELECT id, name, email, created_at, updated_at, update_user
FROM person
`

func (q *Queries) GetPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, getPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdateUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonById = `-- name: GetPersonById :one
SELECT id, name, email, created_at, updated_at, update_user
FROM person
WHERE id = $1
`

func (q *Queries) GetPersonById(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRow(ctx, getPersonById, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdateUser,
	)
	return i, err
}

const insertPerson = `-- name: InsertPerson :one
INSERT INTO person (name, email, created_at, updated_at, update_user)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, created_at, updated_at, update_user
`

type InsertPersonParams struct {
	Name       string
	Email      string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	UpdateUser string
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, insertPerson,
		arg.Name,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdateUser,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdateUser,
	)
	return i, err
}

const pingDb = `-- name: PingDb :one
SELECT 1 as Result
`

func (q *Queries) PingDb(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, pingDb)
	var result int32
	err := row.Scan(&result)
	return result, err
}

const updatePerson = `-- name: UpdatePerson :execrows
UPDATE person SET
  "name" = $2,
  email = $3,
  created_at = $4,
  updated_at = $5,
  update_user = $6
where id = $1
`

type UpdatePersonParams struct {
	ID         int32
	Name       string
	Email      string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	UpdateUser string
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePerson,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdateUser,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
