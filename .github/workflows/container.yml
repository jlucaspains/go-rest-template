name: container

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

permissions:
  pull-requests: write
  contents: read

jobs:
  build_validate:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.0

      - name: Pull dependencies
        run: go mod download
      
      - uses: reviewdog/action-staticcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: true

      - name: Test
        run: go test -cover ./... > test-result.txt

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'
    
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Pull request comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: test-result.txt

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/gorest-template
          tags: |
            type=ref,event=pr
            type=raw,value=${{ steps.gitversion.outputs.majorMinor }},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ steps.gitversion.outputs.majorMinorPatch }},enable=${{ github.ref == 'refs/heads/main' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_aks:
    if: github.event_name == 'push'
    needs: [build_validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy
        uses: "./.github/template/deploy-aks"
        with:
          azure_credentials: '${{ secrets.AZURE_CREDENTIALS_FOR_AKS }}'
          azure_resource_group: '${{ secrets.AZURE_RESOURCE_GROUP_FOR_AKS }}'
          azure_cluster_name: '${{ secrets.AZURE_CLUSTER_NAME }}'
          image_id: '${{ secrets.DOCKERHUB_USERNAME }}/gorest-template:${{ needs.build_validate.outputs.version }}'
          auth_config_url: '${{ secrets.AUTH_CONFIG_URL }}'
          auth_audience: '${{ secrets.AUTH_AUDIENCE }}'
          db_connection_string: '${{ secrets.DB_CONNECTION_STRING }}'
          postgres_db: '${{ secrets.POSTGRES_DB }}'
          postgres_user: '${{ secrets.POSTGRES_USER }}'
          postgres_password: '${{ secrets.POSTGRES_PASSWORD }}'
          
  deploy_azurewebapp:
    if: github.event_name == 'push'
    needs: [build_validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy
        uses: "./.github/template/deploy-azwebapp"
        with:
          azure_credentials: '${{ secrets.AZURE_CREDENTIALS }}'
          azure_webapp_name: '${{ secrets.AZURE_WEBAPP_NAME }}'
          image_id: '${{ secrets.DOCKERHUB_USERNAME }}/gorest-template:${{ needs.build_validate.outputs.version }}'
          auth_config_url: '${{ secrets.AUTH_CONFIG_URL }}'
          auth_audience: '${{ secrets.AUTH_AUDIENCE }}'
          db_connection_string: '${{ secrets.DB_CONNECTION_STRING }}'
          db_provider: '${{ secrets.DB_PROVIDER }}'